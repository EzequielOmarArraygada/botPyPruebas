#!/usr/bin/env python3
"""
Script de verificaci√≥n de configuraci√≥n para el bot de Discord
Verifica que todas las variables de entorno necesarias est√©n configuradas correctamente
"""

import os
import json
from dotenv import load_dotenv

def check_config():
    """Verifica la configuraci√≥n del bot"""
    print("üîç Verificando configuraci√≥n del bot...\n")
    
    # Cargar variables de entorno
    load_dotenv()
    
    # Variables cr√≠ticas
    critical_vars = {
        'DISCORD_TOKEN': 'Token de Discord (requerido)',
        'GUILD_ID': 'ID del servidor (requerido)',
        'GOOGLE_CREDENTIALS_JSON': 'Credenciales de Google (requerido)'
    }
    
    # Variables de canales para el panel de comandos
    channel_vars = {
        'TARGET_CHANNEL_ID_FAC_A': 'Canal de Factura A',
        'TARGET_CHANNEL_ID_ENVIOS': 'Canal de Env√≠os',
        'TARGET_CHANNEL_ID_CASOS': 'Canal de Casos',
        'TARGET_CHANNEL_ID_CASOS_ENVIOS': 'Canal de Solicitudes de Env√≠os',
        'TARGET_CHANNEL_ID_BUSCAR_CASO': 'Canal de B√∫squeda de Casos',
        'TARGET_CHANNEL_ID_TAREAS': 'Canal de Tareas',
        'TARGET_CHANNEL_ID_TAREAS_REGISTRO': 'Canal de Registro de Tareas',
        'TARGET_CHANNEL_ID_GUIA_COMANDOS': 'Canal de Gu√≠a de Comandos'
    }
    
    # Variables de Google Sheets
    sheets_vars = {
        'GOOGLE_SHEET_ID_FAC_A': 'ID de hoja de Factura A',
        'GOOGLE_SHEET_ID_CASOS': 'ID de hoja de Casos',
        'GOOGLE_SHEET_ID_TAREAS': 'ID de hoja de Tareas',
        'GOOGLE_SHEET_SEARCH_SHEET_ID': 'ID de hoja de B√∫squeda'
    }
    
    # Variables opcionales
    optional_vars = {
        'ANDREANI_API_AUTH': 'API de Andreani (opcional)',
        'GEMINI_API_KEY': 'API de Gemini (opcional)',
        'MANUAL_DRIVE_FILE_ID': 'ID de archivo del manual (opcional)',
        'TARGET_CATEGORY_ID': 'ID de categor√≠a objetivo (opcional)',
        'ERROR_CHECK_INTERVAL_MS': 'Intervalo de verificaci√≥n de errores (opcional)'
    }
    
    print("üìã Variables Cr√≠ticas:")
    critical_errors = []
    for var, description in critical_vars.items():
        value = os.getenv(var)
        if value:
            if var == 'GOOGLE_CREDENTIALS_JSON':
                try:
                    json.loads(value)
                    print(f"  ‚úÖ {description}: Configurado correctamente")
                except json.JSONDecodeError:
                    print(f"  ‚ùå {description}: JSON inv√°lido")
                    critical_errors.append(var)
            else:
                print(f"  ‚úÖ {description}: Configurado")
        else:
            print(f"  ‚ùå {description}: NO CONFIGURADO")
            critical_errors.append(var)
    
    print("\nüì∫ Variables de Canales (Panel de Comandos):")
    channel_errors = []
    for var, description in channel_vars.items():
        value = os.getenv(var)
        if value:
            try:
                int(value)
                print(f"  ‚úÖ {description}: {value}")
            except ValueError:
                print(f"  ‚ùå {description}: ID inv√°lido ({value})")
                channel_errors.append(var)
        else:
            print(f"  ‚ö†Ô∏è  {description}: NO CONFIGURADO")
            channel_errors.append(var)
    
    print("\nüìä Variables de Google Sheets:")
    sheets_errors = []
    for var, description in sheets_vars.items():
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {description}: Configurado")
        else:
            print(f"  ‚ö†Ô∏è  {description}: NO CONFIGURADO")
            sheets_errors.append(var)
    
    print("\nüîß Variables Opcionales:")
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {description}: Configurado")
        else:
            print(f"  ‚ö™ {description}: No configurado (opcional)")
    
    # Resumen
    print("\n" + "="*50)
    print("üìä RESUMEN DE CONFIGURACI√ìN")
    print("="*50)
    
    if critical_errors:
        print(f"‚ùå ERRORES CR√çTICOS ({len(critical_errors)}):")
        for error in critical_errors:
            print(f"  - {error}")
        print("\n‚ö†Ô∏è  El bot NO funcionar√° correctamente sin estas variables.")
    else:
        print("‚úÖ No hay errores cr√≠ticos de configuraci√≥n.")
    
    if channel_errors:
        print(f"\n‚ö†Ô∏è  CANALES FALTANTES ({len(channel_errors)}):")
        for error in channel_errors:
            print(f"  - {error}")
        print("\n‚ö†Ô∏è  El panel de comandos puede no funcionar correctamente.")
    
    if sheets_errors:
        print(f"\n‚ö†Ô∏è  HOJAS DE GOOGLE FALTANTES ({len(sheets_errors)}):")
        for error in sheets_errors:
            print(f"  - {error}")
        print("\n‚ö†Ô∏è  Algunas funcionalidades pueden no estar disponibles.")
    
    if not critical_errors and not channel_errors and not sheets_errors:
        print("üéâ ¬°Toda la configuraci√≥n est√° correcta!")
        print("El bot deber√≠a funcionar sin problemas.")
    
    print("\n" + "="*50)
    print("üí° CONSEJOS:")
    print("="*50)
    print("1. Aseg√∫rate de que el archivo .env est√© en la ra√≠z del proyecto")
    print("2. Verifica que los IDs de canales sean correctos")
    print("3. Confirma que las credenciales de Google sean v√°lidas")
    print("4. Para obtener IDs de canales: Activa el modo desarrollador en Discord")
    print("5. Haz clic derecho en el canal y selecciona 'Copiar ID'")

if __name__ == "__main__":
    check_config() 